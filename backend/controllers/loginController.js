// üìÅ controllers/loginController.js
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import pool from '../db.js';

export const loginProvider = async (req, res) => {
  const { email, password } = req.body;

  try {
    const result = await pool.query('SELECT * FROM providers WHERE email = $1', [email]);
    const provider = result.rows[0];

    if (!provider) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const isMatch = await bcrypt.compare(password, provider.password);
    if (!isMatch) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign(
      { id: provider.id, email: provider.email, type: provider.type },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({ message: '–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω', token });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};


// üìÅ routes/authRoutes.js
import express from 'express';
import { registerProvider } from '../controllers/authController.js';
import { loginProvider } from '../controllers/loginController.js';

const router = express.Router();

router.post('/providers/register', registerProvider);
router.post('/providers/login', loginProvider);

export default router;


// üìÅ .env (—É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ Railway –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
// ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
JWT_SECRET=your_super_secret_key
