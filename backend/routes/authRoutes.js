import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import pool from '../db.js';

const router = express.Router();

// üîê JWT —Å–µ–∫—Ä–µ—Ç
const JWT_SECRET = process.env.JWT_SECRET || 'default_secret';

// üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
router.post('/providers/register', async (req, res) => {
  const {
    type,
    name,
    location,
    contactPerson,
    email,
    phone,
    languages,
    password,
    description,
    images
  } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(password, 10);

    const query = `
      INSERT INTO providers 
        (type, name, location, contact_name, email, phone, languages, password, description, images, created_at)
      VALUES 
        ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW())
      RETURNING id
    `;
    const values = [
      type,
      name,
      location,
      contactPerson,
      email,
      phone,
      JSON.stringify(languages),
      hashedPassword,
      description,
      images // base64 string
    ];

    const result = await pool.query(query, values);
    res.status(201).json({ message: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', id: result.rows[0].id });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// üîë –õ–æ–≥–∏–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
router.post('/providers/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const result = await pool.query('SELECT * FROM providers WHERE email = $1', [email]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const user = result.rows[0];
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign(
      { id: user.id, email: user.email },
      JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', token });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
  }
});

export default router;
