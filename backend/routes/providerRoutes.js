const express = require('express');
const router = express.Router();
const db = require('../db');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const providerAuth = require('../middleware/providerAuth');

const JWT_SECRET = process.env.JWT_SECRET;

// üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
router.post('/register', async (req, res) => {
  const { name, email, phone, password, image } = req.body;

  if (!name || !email || !phone || !password) {
    return res.status(400).json({ error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
  }

  try {
    const existingProvider = await db.query('SELECT * FROM providers WHERE email = $1', [email]);
    if (existingProvider.rows.length > 0) {
      return res.status(400).json({ error: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    await db.query(
      'INSERT INTO providers (name, email, phone, password, image) VALUES ($1, $2, $3, $4, $5)',
      [name, email, phone, hashedPassword, image || null]
    );

    res.status(201).json({ message: '–ü–æ—Å—Ç–∞–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üîπ –õ–æ–≥–∏–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const provider = await db.query('SELECT * FROM providers WHERE email = $1', [email]);

    if (provider.rows.length === 0) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const isMatch = await bcrypt.compare(password, provider.rows[0].password);
    if (!isMatch) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign({ id: provider.rows[0].id }, JWT_SECRET, { expiresIn: '7d' });

    res.json({ token });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∑–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç)
router.get('/profile', providerAuth, async (req, res) => {
  try {
    const providerId = req.provider.id;
    const result = await db.query(
      'SELECT id, name, email, phone, image FROM providers WHERE id = $1',
      [providerId]
    );
    res.json(result.rows[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;
